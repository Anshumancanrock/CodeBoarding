name: CodeBoarding Documentation update workflow

on:
  workflow_dispatch:
    inputs:
      repository_url:
        description: 'Repository URL to analyze'
        required: false
        default: ''
        type: string
      source_branch:
        description: 'Source branch to analyze'
        required: false
        default: ''
        type: string
      target_branch:
        description: 'Target branch for documentation'
        required: false
        default: ''
        type: string
      output_directory:
        description: 'Output directory for documentation files'
        required: false
        default: '.codeboarding'
        type: string
      output_format:
        description: 'Output format for documentation'
        required: false
        default: '.md'
        type: choice
        options:
          - '.md'
          - '.mdx'
          - '.rst'
  push:
    branches:
      - master
      - main

jobs:
  update-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Required to access branch history

      # Determine branches based on context
      - name: Set branch variables
        id: set-branches
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "source_branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
            echo "target_branch=${{ github.base_ref }}" >> $GITHUB_OUTPUT
            echo "repository_url=https://github.com/${{ github.repository }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.source_branch }}" != "" ] && [ "${{ github.event.inputs.target_branch }}" != "" ]; then
            echo "source_branch=${{ github.event.inputs.source_branch }}" >> $GITHUB_OUTPUT
            echo "target_branch=${{ github.event.inputs.target_branch }}" >> $GITHUB_OUTPUT
            echo "repository_url=${{ github.event.inputs.repository_url || format('https://github.com/{0}', github.repository) }}" >> $GITHUB_OUTPUT
          else
            echo "source_branch=main" >> $GITHUB_OUTPUT
            echo "target_branch=main" >> $GITHUB_OUTPUT
            echo "repository_url=https://github.com/${{ github.repository }}" >> $GITHUB_OUTPUT
          fi

      - name: Fetch CodeBoarding Documentation
        timeout-minutes: 30
        id: codeboarding
        uses: CodeBoarding/CodeBoarding-GHAction@0.1.2
        with:
          repository_url: ${{ steps.set-branches.outputs.repository_url }}
          source_branch: ${{ steps.set-branches.outputs.source_branch }}
          target_branch: ${{ steps.set-branches.outputs.target_branch }}
          output_directory: ${{ github.event.inputs.output_directory || '.codeboarding' }}
          output_format: ${{ github.event.inputs.output_format || '.md' }}

      - name: Display Action Results
        run: |
          echo "Documentation files created: ${{ steps.codeboarding.outputs.markdown_files_created }}"
          echo "JSON files created: ${{ steps.codeboarding.outputs.json_files_created }}"
          echo "Documentation directory: ${{ steps.codeboarding.outputs.output_directory }}"
          echo "JSON directory: ${{ steps.codeboarding.outputs.json_directory }}"
          echo "Has changes: ${{ steps.codeboarding.outputs.has_changes }}"

      # Check if we have any changes to commit
      - name: Check for changes
        id: git-changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "has_git_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_git_changes=false" >> $GITHUB_OUTPUT
          fi

      # Generate architecture documentation from CodeBoarding files
      - name: Generate architecture documentation
        if: steps.git-changes.outputs.has_git_changes == 'true' && steps.codeboarding.outputs.has_changes == 'true'
        run: |
          # Create docs/development directory if it doesn't exist
          mkdir -p docs/development
          
          # Get the output format
          output_format="${{ github.event.inputs.output_format || '.md' }}"
          file_extension="${output_format}"
          
          # Log the files found in the CodeBoarding directory
          echo "📁 Scanning CodeBoarding directory for ${file_extension} files..."
          ls -la .codeboarding/ || echo "⚠️  CodeBoarding directory not found"
          
          # Initialize the architecture file
          echo "" > "docs/development/architecture${file_extension}"
          
          # First, add on_boarding file if it exists
          if [ -f ".codeboarding/on_boarding${file_extension}" ]; then
            echo "✅ Found and adding: on_boarding${file_extension}"
            cat ".codeboarding/on_boarding${file_extension}" > "docs/development/architecture${file_extension}"
            echo "" >> "docs/development/architecture${file_extension}"
          else
            echo "ℹ️  on_boarding${file_extension} not found, skipping"
          fi
          
          # Count and log other files
          other_files_count=0
          
          # Then add all other files (excluding on_boarding)
          for file in .codeboarding/*${file_extension}; do
            if [ -f "$file" ] && [ "$(basename "$file")" != "on_boarding${file_extension}" ]; then
              filename=$(basename "$file")
              echo "✅ Found and adding: $filename"
              echo "" >> "docs/development/architecture${file_extension}"
              cat "$file" >> "docs/development/architecture${file_extension}"
              echo "" >> "docs/development/architecture${file_extension}"
              other_files_count=$((other_files_count + 1))
            fi
          done
          
          # Summary logging
          echo ""
          echo "📊 Architecture generation summary:"
          echo "   - on_boarding${file_extension}: $([ -f ".codeboarding/on_boarding${file_extension}" ] && echo "included" || echo "not found")"
          echo "   - Other ${file_extension} files: $other_files_count files processed"
          echo "   - Output: docs/development/architecture${file_extension}"
          
          # Show final file size
          if [ -f "docs/development/architecture${file_extension}" ]; then
            file_size=$(wc -c < "docs/development/architecture${file_extension}")
            echo "   - Final file size: $file_size bytes"
          fi
          
          echo "Architecture documentation generated at docs/development/architecture${file_extension}"

      - name: Commit and push changes
        if: steps.git-changes.outputs.has_git_changes == 'true' && steps.codeboarding.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "docs: update codeboarding documentation and generate architecture

          ## 📚 Documentation Update
          This commit contains updated documentation files fetched from the CodeBoarding service and automatically generated architecture documentation.
          
          ### 📊 Summary
          - Documentation files created/updated: ${{ steps.codeboarding.outputs.markdown_files_created }}
          - JSON files created/updated: ${{ steps.codeboarding.outputs.json_files_created }}
          - Documentation directory: ${{ steps.codeboarding.outputs.output_directory }}/
          - JSON directory: ${{ steps.codeboarding.outputs.json_directory }}/
          - Output format: ${{ github.event.inputs.output_format || '.md' }}
          - Repository analyzed: ${{ steps.set-branches.outputs.repository_url }}
          - Source branch: ${{ steps.set-branches.outputs.source_branch }}
          - Target branch: ${{ steps.set-branches.outputs.target_branch }}
          - Architecture documentation: docs/development/architecture${{ github.event.inputs.output_format || '.md' }} (auto-generated)
          
          The generated files have been automatically appended to the development documentation, and the architecture file has been generated from the CodeBoarding analysis files.
          
          🤖 This commit was automatically generated by the CodeBoarding documentation update workflow."
          git push
