{
  "description": "One paragraph explaining the functionality which is represented by this graph. What the main flow is and what is its purpose.",
  "components": [
    {
      "name": "API Layer",
      "description": "This component serves as the external interface for the application, built using FastAPI. It defines all public endpoints, handles incoming HTTP requests, validates request/response models, and orchestrates the initial interaction with the `Orchestration Workflow`. It ensures secure and structured communication with clients.",
      "referenced_source_code": [
        {
          "qualified_name": "local_app.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/local_app.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "can_expand": true
    },
    {
      "name": "Orchestration Workflow",
      "description": "The `Orchestration Workflow` is the central coordinator of the analysis pipeline. Leveraging frameworks like LangChain/LangGraph, it manages the overall flow of operations, sequencing calls between the `Static Analysis Module`, `AI Analysis Engine`, and `Output Generation` components. It ensures data is correctly passed between stages and handles the overall execution logic.",
      "referenced_source_code": [
        {
          "qualified_name": "local_app.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/local_app.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "demo.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/demo.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "can_expand": true
    },
    {
      "name": "Static Analysis Module",
      "description": "This component is responsible for the initial, language-agnostic processing of source code. It parses code, builds Abstract Syntax Trees (ASTs), generates Control Flow Graphs (CFGs), and extracts raw code metadata. It acts as the foundational data provider for subsequent AI-driven analysis.",
      "referenced_source_code": [
        {
          "qualified_name": "agents/tools/read_cfg.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/agents/tools/read_cfg.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "agents/tools/read_source.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/agents/tools/read_source.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "can_expand": true
    },
    {
      "name": "AI Analysis Engine",
      "description": "The `AI Analysis Engine` encapsulates all interactions with Large Language Models (LLMs) from various providers (OpenAI, Anthropic, Google Gemini, AWS Bedrock). It handles prompt engineering, manages multi-provider support, processes LLM responses, and transforms raw static analysis data into rich, structured analysis models using AI capabilities.",
      "referenced_source_code": [
        {
          "qualified_name": "agents/agent.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/agents/agent.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        },
        {
          "qualified_name": "agents/meta_agent.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/agents/meta_agent.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        },
        {
          "qualified_name": "agents/planner_agent.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/agents/planner_agent.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        }
      ],
      "can_expand": true
    },
    {
      "name": "Data Persistence",
      "description": "This component provides an abstraction layer for all data storage and retrieval operations. It manages the persistence of analysis results, intermediate data, and caching mechanisms. It abstracts the underlying database technology (e.g., DuckDB via SQLAlchemy), ensuring other components do not need direct database knowledge.",
      "referenced_source_code": [
        {
          "qualified_name": "duckdb_crud.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/duckdb_crud.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        }
      ],
      "can_expand": true
    },
    {
      "name": "Output Generator",
      "description": "The `Output Generator` component serves as the final stage in the project's analysis pipeline. Its primary responsibility is to consume the rich, structured analysis models, which are typically produced by the `AI Analysis Engine` and coordinated by the `Orchestration Workflow`. It then transforms these models into various human-readable and machine-consumable formats, including Markdown, HTML, Sphinx documentation, and MDX. A key emphasis of this component is the generation of interactive diagrams, such as those using Mermaid.js, to enhance visualization of the analysis results. Recent architectural adjustments indicate a streamlining or simplification of its output capabilities, focusing on efficient and targeted rendering. This component is crucial for making complex code analysis results accessible and actionable for users.",
      "referenced_source_code": [
        {
          "qualified_name": "output_generators/html.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/output_generators/html.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        },
        {
          "qualified_name": "diagram_analysis/diagram_generator.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/diagram_analysis/diagram_generator.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "can_expand": true
    },
    {
      "name": "Integrations",
      "description": "This component is dedicated to managing interactions with external services. This includes specific logic for cloning repositories from platforms like GitHub using `GitPython` or `Dulwich`, and potentially other integrations with tools like VS Code or an MCP Server. It isolates external API complexities from core business logic.",
      "referenced_source_code": [
        {
          "qualified_name": "github_action.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/github_action.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        },
        {
          "qualified_name": "repo_utils.py",
          "reference_file": "repo_utils.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        }
      ],
      "can_expand": true
    },
    {
      "name": "Configuration",
      "description": "The `Configuration` component centralizes all application settings, environment variable loading, and credential management. It provides a consistent and secure way for other components to access necessary parameters without hardcoding, facilitating easy deployment and environment-specific adjustments.",
      "referenced_source_code": [
        {
          "qualified_name": "logging_config.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/logging_config.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        },
        {
          "qualified_name": "local_app.py",
          "reference_file": "/mnt/e/StartUp/CodeBoarding/local_app.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "can_expand": false
    }
  ],
  "components_relations": [
    {
      "relation": "sends to",
      "src_name": "API Layer",
      "dst_name": "Orchestration Workflow"
    },
    {
      "relation": "sends to",
      "src_name": "Orchestration Workflow",
      "dst_name": "Static Analysis Module"
    },
    {
      "relation": "sends to",
      "src_name": "Orchestration Workflow",
      "dst_name": "AI Analysis Engine"
    },
    {
      "relation": "sends to",
      "src_name": "Orchestration Workflow",
      "dst_name": "Output Generator"
    },
    {
      "relation": "sends to",
      "src_name": "Static Analysis Module",
      "dst_name": "Orchestration Workflow"
    },
    {
      "relation": "sends to",
      "src_name": "AI Analysis Engine",
      "dst_name": "Orchestration Workflow"
    },
    {
      "relation": "sends to",
      "src_name": "Orchestration Workflow",
      "dst_name": "Data Persistence"
    },
    {
      "relation": "sends to",
      "src_name": "AI Analysis Engine",
      "dst_name": "Data Persistence"
    },
    {
      "relation": "sends to",
      "src_name": "Data Persistence",
      "dst_name": "Orchestration Workflow"
    },
    {
      "relation": "sends to",
      "src_name": "Data Persistence",
      "dst_name": "AI Analysis Engine"
    },
    {
      "relation": "sends to",
      "src_name": "Orchestration Workflow",
      "dst_name": "Integrations"
    },
    {
      "relation": "provides to",
      "src_name": "Configuration",
      "dst_name": "API Layer"
    },
    {
      "relation": "provides to",
      "src_name": "Configuration",
      "dst_name": "Orchestration Workflow"
    },
    {
      "relation": "provides to",
      "src_name": "Configuration",
      "dst_name": "Static Analysis Module"
    },
    {
      "relation": "provides to",
      "src_name": "Configuration",
      "dst_name": "AI Analysis Engine"
    },
    {
      "relation": "provides to",
      "src_name": "Configuration",
      "dst_name": "Data Persistence"
    },
    {
      "relation": "provides to",
      "src_name": "Configuration",
      "dst_name": "Output Generator"
    },
    {
      "relation": "provides to",
      "src_name": "Configuration",
      "dst_name": "Integrations"
    }
  ]
}
