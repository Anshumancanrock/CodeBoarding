{
  "description": "The CodeBoarding system operates as a sophisticated pipeline for automated architectural documentation. It begins with the API Service receiving a request, which is then logged and managed by the Job Database. The Orchestration Engine serves as the central nervous system, coordinating the entire analysis process. It first directs the Repository Manager to fetch the target codebase. This code then undergoes structural examination by the Static Analysis Engine. The resulting raw data is intelligently processed by the AI Interpretation Layer, a suite of agents that abstract, detail, plan, validate, and analyze changes within the architecture. Finally, the refined architectural insights are passed to the Output Generation Engine to produce various documentation formats, completing the cycle by making the output accessible via the API Service. This design emphasizes a clear, sequential flow, distinct component responsibilities, and extensibility for future language and AI model integrations.",
  "components": [
    {
      "name": "API Service",
      "description": "The external interface for CodeBoarding, handling user requests, job initiation, and status retrieval.",
      "referenced_source_code": [
        {
          "qualified_name": "local_app",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/local_app.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        }
      ],
      "can_expand": true
    },
    {
      "name": "Job Database",
      "description": "Persistent storage for managing the lifecycle, status, and results of all documentation generation jobs.",
      "referenced_source_code": [
        {
          "qualified_name": "duckdb_crud",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/duckdb_crud.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        }
      ],
      "can_expand": true
    },
    {
      "name": "Orchestration Engine",
      "description": "The central control unit that manages the entire documentation generation pipeline, coordinating all analysis and generation stages.",
      "referenced_source_code": [
        {
          "qualified_name": "diagram_generator",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/diagram_analysis/diagram_generator.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        }
      ],
      "can_expand": false
    },
    {
      "name": "Repository Manager",
      "description": "Manages all interactions with source code repositories, including cloning, fetching, and extracting version differences.",
      "referenced_source_code": [
        {
          "qualified_name": "__init__",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/agents/diff_analyzer.py",
          "reference_start_line": 21,
          "reference_end_line": 32
        },
        {
          "qualified_name": "git_diff",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/repo_utils/git_diff.py",
          "reference_start_line": 27,
          "reference_end_line": 76
        }
      ],
      "can_expand": true
    },
    {
      "name": "Static Analysis Engine",
      "description": "Performs deep, language-specific analysis of source code to extract structural information without semantic interpretation.",
      "referenced_source_code": [
        {
          "qualified_name": "scanner",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/static_analyzer/scanner.py",
          "reference_start_line": 13,
          "reference_end_line": 66
        },
        {
          "qualified_name": "client",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/static_analyzer/lsp_client/typescript_client.py",
          "reference_start_line": 10,
          "reference_end_line": 214
        }
      ],
      "can_expand": true
    },
    {
      "name": "AI Interpretation Layer",
      "description": "A collection of specialized AI agents that interpret static analysis data to generate high-level architectural insights, including abstraction, detailing, planning, validation, and diff analysis.",
      "referenced_source_code": [
        {
          "qualified_name": "meta_agent",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/diagram_analysis/diagram_generator.py",
          "reference_start_line": 37,
          "reference_end_line": 37
        },
        {
          "qualified_name": "abstraction_agent",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/diagram_analysis/diagram_generator.py",
          "reference_start_line": 33,
          "reference_end_line": 33
        },
        {
          "qualified_name": "details_agent",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/diagram_analysis/diagram_generator.py",
          "reference_start_line": 32,
          "reference_end_line": 32
        },
        {
          "qualified_name": "planner_agent",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/diagram_analysis/diagram_generator.py",
          "reference_start_line": 34,
          "reference_end_line": 34
        },
        {
          "qualified_name": "validator_agent",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/diagram_analysis/diagram_generator.py",
          "reference_start_line": 35,
          "reference_end_line": 35
        },
        {
          "qualified_name": "diff_analyzer",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/agents/diff_analyzer.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        }
      ],
      "can_expand": true
    },
    {
      "name": "Output Generation Engine",
      "description": "Transforms the final, validated architectural insights into various human-readable and diagram-friendly documentation formats.",
      "referenced_source_code": [
        {
          "qualified_name": "html",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/github_action.py",
          "reference_start_line": 36,
          "reference_end_line": 50
        },
        {
          "qualified_name": "markdown",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/github_action.py",
          "reference_start_line": 19,
          "reference_end_line": 33
        },
        {
          "qualified_name": "mdx",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/github_action.py",
          "reference_start_line": 53,
          "reference_end_line": 67
        },
        {
          "qualified_name": "sphinx",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/CodeBoarding/output_generators/sphinx.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        }
      ],
      "can_expand": true
    }
  ],
  "components_relations": [
    {
      "relation": "Initiates Job",
      "src_name": "API Service",
      "dst_name": "Job Database"
    },
    {
      "relation": "Triggers Analysis",
      "src_name": "API Service",
      "dst_name": "Orchestration Engine"
    },
    {
      "relation": "Manages Job State",
      "src_name": "Orchestration Engine",
      "dst_name": "Job Database"
    },
    {
      "relation": "Requests Code",
      "src_name": "Orchestration Engine",
      "dst_name": "Repository Manager"
    },
    {
      "relation": "Provides Code",
      "src_name": "Repository Manager",
      "dst_name": "Orchestration Engine"
    },
    {
      "relation": "Requests Static Analysis",
      "src_name": "Orchestration Engine",
      "dst_name": "Static Analysis Engine"
    },
    {
      "relation": "Provides Analysis Results",
      "src_name": "Static Analysis Engine",
      "dst_name": "Orchestration Engine"
    },
    {
      "relation": "Feeds Data",
      "src_name": "Orchestration Engine",
      "dst_name": "AI Interpretation Layer"
    },
    {
      "relation": "Returns Insights",
      "src_name": "AI Interpretation Layer",
      "dst_name": "Orchestration Engine"
    },
    {
      "relation": "Queries Diff",
      "src_name": "AI Interpretation Layer",
      "dst_name": "Repository Manager"
    },
    {
      "relation": "Passes Final Insights",
      "src_name": "Orchestration Engine",
      "dst_name": "Output Generation Engine"
    },
    {
      "relation": "Delivers Documentation",
      "src_name": "Output Generation Engine",
      "dst_name": "API Service"
    }
  ]
}
